---
layout: post
title:  "Euklids algoritme"
mathjax: true
hidden: true
permalink: /matematiske_problemer/euklids_algoritme.html
---

Her kan du se en kode som produserer løsningsforslag til Euklids algoritme for å først finne største felles multiplum mellom to tall og deretter bruke dette til å løse diofantiske likninger av typen \\(ax + by = 1\\).

<details>
<summary>Vis kode</summary>
<p>
{% highlight python %}
{% include vis_kode/euklids_algoritme.py %}
{% endhighlight %}
</p>

</details>

<details >
<summary>Prøv koden</summary>


<div background='black'>
<input type='number' id='tall1' placeholder='Skriv inn første tall' value='1027'  /> <br>
<input type='number' id='tall2' placeholder='Skriv inn andre tall'  value='729' /> 
</div>

<button  class='button button5' style="vertical-align:middle" onclick='losning()'> <span> Kjør </span></button>
<div    >
<p id='svar'> </p>
</div>

</details>



<script>
function euklidsfunc(x,y) {
    var r_0 = parseFloat(math.max(Number(x),Number(y)));
    var r_1 = parseFloat(math.min(Number(x),Number(y)));
    var c_1 = parseFloat(math.floor(r_0/r_1));
    var r_2 = parseFloat(r_0-c_1*r_1);
    var likninger = [[r_0, c_1, r_1, r_2]];
    while (likninger[likninger.length -1][likninger[likninger.length -1].length -1] !== math.gcd(Number(x),Number(y))) {
    var a = likninger[likninger.length -1][likninger[likninger.length -1].length -2];
    var b = likninger[likninger.length -1][likninger[likninger.length -1].length -1];
    var c = math.floor(a/b);
    var r = a-c*b;
    likninger.push([a,c,b,r]);
    }
    return likninger ;
  }
</script>
<script>
function losning() {
  var matrise = euklidsfunc(Number(document.getElementById('tall1').value), Number(document.getElementById('tall2').value));
  var losningstekst = "Løsningen er \n \n";
  var i=0;
  for (tuppel of matrise) {
    losningstekst += "\\begin{multline*} " + String(tuppel[0]) + " = " + String(tuppel[1])+ "·" + String(tuppel[2]) + " + " + String(tuppel[3]) + " \\end{multline*} \n \n";
  }
  losningstekst += "\n\n Vi reverserer nå prosessen:";
  var reversering = [
                    [
                    matrise[matrise.length-1][matrise[matrise.length-1].length-1],
                    1,
                    matrise[matrise.length-1][0],
                    -matrise[matrise.length-1][1],
                    matrise[matrise.length-1][2]
                    ]
                    ];
  var lr = reversering[reversering.length-1]
  losningstekst += "\\begin{multline*}"
                    + String(lr[0])
                    + " = "
                    + String(lr[1])
                    + "·"
                    + String(lr[2])
                    + " + "
                    + String(lr[3])
                    + "·"
                    + String(lr[4])
                    + "\\end{multline*}";
  var i = 0
  for (i= 0; i< matrise.length-1; i++) {
      var lr = reversering[reversering.length-1];
      var d = lr[lr.length-2];
      var r_nminus1 = matrise[matrise.length-i-2][0];
      var c = lr[1];
      var c_n = matrise[matrise.length-i-2][1];
      var r_n = matrise[matrise.length-i-1][0];
      reversering.push(
          [matrise[matrise.length-1][matrise[matrise.length-1].length-1],
          d,
          r_nminus1,
          (c+d*(-c_n)),
          r_n
          ]
          );
      losningstekst += "\\begin{multline*}"
                        + String(lr[0])
                        + " = "
                        + String(c)
                        + "·"
                        + String(r_n)
                        + " + "
                        + String(d)
                        + "·("
                        + String(r_nminus1)
                        + " - "
                        + String(c_n)
                        + "·"
                        + String(r_n)
                        + ") \\end{multline*}"
                        + "\n \n"
                        + "\\begin{multline*}"
                        + String(lr[0])
                        + " = "
                        + String(d)
                        + "·"
                        + String(r_nminus1)
                        + " + "
                        + String(reversering[reversering.length -1][reversering[reversering.length-1].length-2])
                        + "·"
                        + String(r_n)
                        + "\\end{multline*}"
                    }
  document.getElementById('svar').innerHTML = losningstekst;
  MathJax.typeset();
}
</script>
